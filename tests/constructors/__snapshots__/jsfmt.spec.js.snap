// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`constructors.java 1`] = `
public class Constructors {

  public Constructors() {
    this(true);
    System.out.println("empty constructor");
  }

  Constructors(boolean one) {
    super();
    System.out.println("constructor with boolean " + one);
  }

  Constructors(boolean one, boolean two) {
    this();
    System.out.println("constructor with boolean " + one + " and " + two);
  }

  Constructors() {
    super("lots", "of", "parameters", "when there is not enough space", "should wrap well");
    System.out.println("constructor with super that wraps");
  }

  Constructors() {
    super("enough parameter", "fit");
    System.out.println("constructor with super that does not wrap");
  }

  Constructors() {
    this("lots", "of", "parameters", "when there is not enough space", "should wrap well");
    System.out.println("constructor with this that wraps");
  }

  Constructors() {
    this("enough parameter", "fit");
    System.out.println("constructor with this that does not wrap");
  }

  Constructors() throws Exception {
    throw new Exception("Exception in constructor");
  }

  Constructors() throws Exception, VeryVeryLongExceptionName, AnotherLongExceptionName {
    throw new Exception("Exception in constructor");
  }

}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
public class Constructors {

    public Constructors() {
        this(true);
        System.out.println("empty constructor");
    }

    Constructors(boolean one) {
        super();
        System.out.println("constructor with boolean " + one);
    }

    Constructors(boolean one, boolean two) {
        this();
        System.out.println("constructor with boolean " + one + " and " + two);
    }

    Constructors() {
        super(
            "lots",
            "of",
            "parameters",
            "when there is not enough space",
            "should wrap well"
        );
        System.out.println("constructor with super that wraps");
    }

    Constructors() {
        super("enough parameter", "fit");
        System.out.println("constructor with super that does not wrap");
    }

    Constructors() {
        this(
            "lots",
            "of",
            "parameters",
            "when there is not enough space",
            "should wrap well"
        );
        System.out.println("constructor with this that wraps");
    }

    Constructors() {
        this("enough parameter", "fit");
        System.out.println("constructor with this that does not wrap");
    }

    Constructors() throws Exception {
        throw new Exception("Exception in constructor");
    }

    Constructors()
        throws
            Exception,
            VeryVeryLongExceptionName,
            AnotherLongExceptionName {
        throw new Exception("Exception in constructor");
    }

}


`;
